package UnitSpawnSystem
import TimerUtils
import Queue
import Wave
import PlayerData
import BossOne
import BossTwo
import BossThree
import BossFour
import BossFive
import SpecialOne
import SpecialTwo
import SpecialThree
import SpecialFour
import SpecialFive
import Boss

constant real SPAWN_TIME = 20.0

public Queue<NormalWave> normalWaves = new Queue<NormalWave>()
public Queue<BossWave> bossWaves = new Queue<BossWave>()
Queue<SpecialWave> specialWaves = new Queue<SpecialWave>()

timer spawnTimer = getTimer()
int level = 1
	
		
function onSpawnTime()	
	if level mod 7 == 0
		specialWaves.dequeue().spawn()
	else
		normalWaves.dequeue().spawn()
		if level mod 4 == 0
			bossWaves.dequeue().spawn()
		
	level++
	if level > 7
		level = 1
		
	
function initWaves()
	normalWaves.enqueue(new NormalWave('u000', 'u003', 'n000', 1, 6 ))
	normalWaves.enqueue(new NormalWave('u000', 'u003', 'n000', 2, 6 ))
	normalWaves.enqueue(new NormalWave('u000', 'u003', 'n000', 3, 6 ))
	
	normalWaves.enqueue(new NormalWave('u001', 'u004', 'n001', 1, 10 ))
	normalWaves.enqueue(new NormalWave('u001', 'u004', 'n001', 2, 10 ))
	normalWaves.enqueue(new NormalWave('u001', 'u004', 'n001', 3, 10 ))
	
	normalWaves.enqueue(new NormalWave('u002', 'u005', 'n002', 1, 11 ))
	normalWaves.enqueue(new NormalWave('u002', 'u005', 'n002', 2, 11 ))
	normalWaves.enqueue(new NormalWave('u002', 'u005', 'n002', 3, 11 ))
	
	normalWaves.enqueue(new NormalWave('u006', 'u007', 'n005', 1, 12 ))
	normalWaves.enqueue(new NormalWave('u006', 'u007', 'n005', 2, 12 ))
	normalWaves.enqueue(new NormalWave('u006', 'u007', 'n005', 3, 12 ))
	
	normalWaves.enqueue(new NormalWave('u008', 'u009', 'n006', 1, 13 ))
	normalWaves.enqueue(new NormalWave('u008', 'u009', 'n006', 2, 13 ))
	normalWaves.enqueue(new NormalWave('u008', 'u009', 'n006', 3, 13 ))
	
	normalWaves.enqueue(new NormalWave('u00G', 'u00H', 'n008', 1, 14 ))
	normalWaves.enqueue(new NormalWave('u00G', 'u00H', 'n008', 2, 14 ))
	normalWaves.enqueue(new NormalWave('u00G', 'u00H', 'n008', 3, 14 ))
	
	normalWaves.enqueue(new NormalWave('u00I', 'u00K', 'n009', 1, 16 ))
	normalWaves.enqueue(new NormalWave('u00I', 'u00K', 'n009', 2, 16 ))
	normalWaves.enqueue(new NormalWave('u00I', 'u00K', 'n009', 3, 16 ))
	
	normalWaves.enqueue(new NormalWave('u00J', 'u00L', 'n00A', 1, 17 ))
	normalWaves.enqueue(new NormalWave('u00J', 'u00L', 'n00A', 2, 17 ))
	normalWaves.enqueue(new NormalWave('u00J', 'u00L', 'n00A', 3, 17 ))
	
	normalWaves.enqueue(new NormalWave('u00N', 'u00M', 'n00D', 3, 18 ))
	normalWaves.enqueue(new NormalWave('u00N', 'u00M', 'n00D', 3, 18 ))
	normalWaves.enqueue(new NormalWave('u00N', 'u00M', 'n00D', 3, 18 ))
	
	normalWaves.enqueue(new NormalWave('u00S', 'u00P', 'n00F', 3, 18 ))
	normalWaves.enqueue(new NormalWave('u00S', 'u00P', 'n00F', 3, 18 ))
	normalWaves.enqueue(new NormalWave('u00S', 'u00P', 'n00F', 3, 18 ))
	
	normalWaves.enqueue(new NormalWave('u00T', 'u00Q', 'n00G', 3, 18 ))
	normalWaves.enqueue(new NormalWave('u00T', 'u00Q', 'n00G', 3, 18 ))
	normalWaves.enqueue(new NormalWave('u00T', 'u00Q', 'n00G', 3, 18 ))
	
	normalWaves.enqueue(new NormalWave('u00U', 'u00R', 'n00H', 3, 18 ))
	normalWaves.enqueue(new NormalWave('u00U', 'u00R', 'n00H', 3, 18 ))
	normalWaves.enqueue(new NormalWave('u00U', 'u00R', 'n00H', 3, 18 ))
	
	
	bossWaves.enqueue(new BossWave('n003', 1, 85, gg_snd_SkeletonWhat2, "\tFast, melee, spawns minions on death", (vec3 startPos, int unitId, int bounty, vec2 middle) -> begin
		new BossOne(startPos, unitId, bounty, middle)
	end))
	bossWaves.enqueue(new BossWave('n004', 1, 100, gg_snd_DuneWormDeath1, "\tAverage speed, melee", (vec3 startPos, int unitId, int bounty, vec2 middle) -> begin
		new BossTwo(startPos, unitId, bounty, middle)
	end))
	bossWaves.enqueue(new BossWave('n007', 1, 125, gg_snd_AbominationPissed5, "\tslow, melee, slow but powerful attack", (vec3 startPos, int unitId, int bounty, vec2 middle) -> begin
		new BossThree(startPos, unitId, bounty, middle)
	end))
	bossWaves.enqueue(new BossWave('n00B', 1, 150, gg_snd_HydraDeath1, "\tFast, melee, attacks all surrounding buildings with acid", (vec3 startPos, int unitId, int bounty, vec2 middle) -> begin
		new BossFour(startPos, unitId, bounty, middle)
	end))
	bossWaves.enqueue(new BossWave('n00E', 1, 175, gg_snd_AirBargeDeath1, "\tAverage speed, tanky unit", (vec3 startPos, int unitId, int bounty, vec2 middle) -> begin
		new BossFive(startPos, unitId, bounty, middle)
	end))
	
	
	specialWaves.enqueue(new SpecialWave('u00A', 3, 15, (vec3 startPos, int unitId, int bounty, vec2 middle) -> begin
		new SpecialOne(startPos, unitId, bounty, middle)
	end))
	specialWaves.enqueue(new SpecialWave('u00B', 1, 25, (vec3 startPos, int unitId, int bounty, vec2 middle) -> begin
		new SpecialTwo(startPos, unitId, bounty, middle)
	end))
	specialWaves.enqueue(new SpecialWave('u00F', 4, 10, (vec3 startPos, int unitId, int bounty, vec2 middle) -> begin
		new SpecialThree(startPos, unitId, bounty, middle)
	end))
	specialWaves.enqueue(new SpecialWave('u00O', 25, 6, (vec3 startPos, int unitId, int bounty, vec2 middle) -> begin
		new SpecialFour(startPos, unitId, bounty, middle)
	end))
	specialWaves.enqueue(new SpecialWave('n00I',3,15, (vec3 startPos, int unitId, int bounty, vec2 middle) -> begin
		new SpecialFive(startPos, unitId, bounty, middle)
	end))
	


public function startSpawn()
	timer t = CreateTimer()
	if allPlayers.getSize() == 1 and allPlayers.get(0).p.getName() == "WorldEdit"
		print("fast start")
		t.startPeriodic( SPAWN_TIME/5., function onSpawnTime)
	else
		t.startPeriodic( SPAWN_TIME, function onSpawnTime)
	print( ">-Enemies spawn in " + SPAWN_TIME.toInt().toString() + " seconds-<" )
	
public function initSpawn()
	initWaves()
