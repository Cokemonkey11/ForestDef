package InstantRepair
	import DamageMod
	import Colors
	import TextTagEntity
	import GameConditions
	
	Table shieldData = new Table()
	
	class Shield
		real amount
		effect fx
		trigger t
		
		construct(real amount, unit target)
			this.amount = amount
			t = CreateTrigger()
			t.registerUnitEvent(target, EVENT_UNIT_DAMAGED)
			t.addAction(function Shield.blockDmg)
			fx = AddSpecialEffectTarget("Abilities\\Spells\\Human\\DivineShield\\DivineShieldTarget.mdl", target, "origin")
			new TextTagEntity(target.getPos().withZ(25.), vec2(GetRandomReal(0, 4), GetRandomReal(2, 4)),
								amount.toInt().toString() , 10, 1.5, colorA(255, 204, 12, 255))
			
			
								
		ondestroy
			fx.destr()
			t.destr()
		
		static function blockDmg()
			var u = GetTriggerUnit()
			if shieldData.hasInt(u.getHandleId())
				Shield shd = shieldData.loadInt(u.getHandleId()) castTo Shield
				let dmg = getDamage()
				if dmg >= shd.amount
					modifyDamageBy(-shd.amount)
					shieldData.removeInt(u.getHandleId())
					new TextTagEntity(u.getPos().withZ(25.), vec2(GetRandomReal(0, 4), GetRandomReal(5, 7)),
									"Shield destroyed" , 12, 1., colorA(255, 204, 12, 255))
					destroy shd
				else
					modifyDamageBy(-dmg)
					let dmg2 = getDamage()
					shd.amount = shd.amount - dmg
					new TextTagEntity(u.getPos().withZ(25.), vec2(GetRandomReal(0, 4), GetRandomReal(5, 7)),
									shd.amount.toInt().toString() , 10, 1., colorA(255, 204, 12, 255))
				
				
								
			

	function repair()
		if GetSpellAbilityId() == 'A00D'
			unit target = GetSpellTargetUnit()
			if shieldData.hasInt(target.getHandleId())
				Shield shd = shieldData.loadInt(target.getHandleId()) castTo Shield
				shd.amount += 200. + (TimerGetElapsed(gameTime) * 2)
			else
				shieldData.saveInt(target.getHandleId(), (new Shield(200. + (TimerGetElapsed(gameTime) * 2), target)) castTo int)
		
		
	public function initInstantRepair()
		trigger instarep = CreateTrigger(  )
		TriggerRegisterAnyUnitEventBJ( instarep, EVENT_PLAYER_UNIT_SPELL_EFFECT )
		TriggerAddAction( instarep, function repair )
		

endpackage