package DummySystem
	import Entity
	import LinkedListModule
	import AutoCastSystem
	
	int array tower_id
	int array dummy_id
	real array effectchance
	
	int ATTACK_ABIL_DUMMY_ID = 'A099'

	class Tower extends UnitEntity
		use LinkedListModule
		unit tower
		unit dummy
		real effectchance
		int id
		
		construct (unit tow, unit dum ,int id)
			super (vec3(tow.getX(),tow.getY(),0),tow)
			tower = tow
			dummy = dum
			this.id = id
			tower.setUserData(this castTo int)
			dummy.setUserData(this castTo int)
		
		construct (unit tow, int dummyID,real chance, int id)
			super (vec3(tow.getX(),tow.getY(),0),tow)
			tower = tow
			effectchance = chance
			this.id = id
			dummy = CreateUnit(GetOwningPlayer(tower), dummyID, tower.getX(), tower.getY(), 0.)
			SetUnitPathing(dummy, false)
			SetUnitPropWindow(dummy, 0.)
			UnitAddAbility( dummy , 'Amrf')
			UnitRemoveAbility( dummy , 'Amrf')
			dummy.setFlyHeight( 160,0. )
			dummy.setPos(tower.getX(),tower.getY())
			print("configured")
			tower.setUserData(this castTo int)
			dummy.setUserData(this castTo int)
			
		function disableDummy()
			PauseUnit(dummy, true)
			dummy.setVertexColor(100,100,100,160)
			SetUnitTimeScale(dummy, 0.)
			
		function enableDummy()
			PauseUnit(dummy, false)
			dummy.setVertexColor(255,255,255,255)
			SetUnitTimeScale(dummy, 0.)
		
		function doEffect(unit effected)
			castSpell() //dummy, id, effected
		
		function attackOrder(unit target)
			IssueTargetOrder(dummy, "attack", target)
			
		function killDummy()
			dummy.kill()
			destroy this
			
	function onUpgradeStart()
		int data = GetTriggerUnit().getUserData()
		if data != 0
			Tower root = data castTo Tower
			root.disableDummy()

	function onUpgradeCancel()
		int data = GetTriggerUnit().getUserData()
		if data != 0
			Tower root = data castTo Tower
			root.enableDummy()
			
	function onAttack()
		int data = GetAttacker().getUserData()
		if data != 0
			Entity root = data castTo Entity
			if root instanceof Tower
				real r = GetRandomReal(0,1)
				if root.effectchance >= r
					root.doEffect(GetTriggerUnit())

	function onDeath()
		Tower root = Tower.getFirst()
		while root != null
			if GetTriggerUnit() == root.tower
				root.killDummy()
			root = root.next
	
	function create()
		int i = 0
		while tower_id[i] != 0
			if GetUnitTypeId(GetTriggerUnit()) == tower_id[i]
				Tower t = new Tower(GetTriggerUnit(), dummy_id[i],effectchance[i],i)
			i++
		
	
	public function initDummySystem()
		trigger t = CreateTrigger()
		TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_UPGRADE_START )
		TriggerAddAction(t,function onUpgradeStart)
		
		trigger t1 = CreateTrigger()
		TriggerRegisterAnyUnitEventBJ(t1, EVENT_PLAYER_UNIT_UPGRADE_CANCEL )
		TriggerAddAction(t1,function onUpgradeCancel)
		
		trigger t2 = CreateTrigger()
		TriggerRegisterAnyUnitEventBJ(t2, EVENT_PLAYER_UNIT_DEATH )
		TriggerAddAction(t2,function onDeath)
		
		trigger t3 = CreateTrigger()
		TriggerRegisterAnyUnitEventBJ(t3,EVENT_PLAYER_UNIT_ATTACKED)
		TriggerAddAction(t3,function onAttack)
		
		trigger t4 = CreateTrigger()
		TriggerRegisterAnyUnitEventBJ(t4, EVENT_PLAYER_UNIT_UPGRADE_FINISH )
		TriggerAddAction(t4,function create)
	
		//Lightning Towers
		tower_id[0] = 'h01B'
		effectchance[0] = 1
		//Wildfire Towers
		tower_id[1] = 'h01C'
		effectchance[1] = 0.8
		//Corruption Towers
		tower_id[2] = 'h01D'
		dummy_id[2] = 'h01R'
		effectchance[2] = 0.5
		//Venom Towers
		tower_id[3] = 'h01I'
		dummy_id[3] = 'h01S'
		effectchance[3] = .45
		//GroundShaker Towers
		tower_id[4] = 'h01J'
		dummy_id[4] = 'h01R'
		effectchance[4] = .5
		//Wave Towers
		tower_id[5] = 'h01N'
		effectchance[5] = 1
		//Toxic Towers
		tower_id[6] = 'h01L'
		dummy_id[6] = 'h01R'
		effectchance[6] = .3
		//Holy Towers
		tower_id[7] = 'h01K'
		effectchance[7] = 1
		//Artillery Towers
		tower_id[8] = 'h01O'
		dummy_id[8] = 'h01R'
		effectchance[8] = .5
	
endpackage