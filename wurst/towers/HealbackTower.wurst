package HealbackTower
import Assets
import Tower
import Projectile
import PlayerData
import PresetBuffs
import ObjectIdGenerator
import AbilityObjEditing
import BuffObjEditing
import ObjectIds
import TextTagEntity

public constant int HEALBACK_TOWER_ID = 'h02A'
public constant real HEALBACK_RANGE = 800.

public class HealbackTower extends Tower
	int level = 1

	construct(Tower t)
		super(t)
	
	static function getNearestBuilding(vec2 source) returns Entity
		GroupEnumUnitsInRange(ENUM_GROUP, source.x, source.y, HEALBACK_RANGE, Filter(() -> begin
			var u = GetFilterUnit()
			var viable = true
			// filter structureds
			if not IsUnitType(u, UNIT_TYPE_STRUCTURE) or not u.isAlive()
				viable = false
			
			// filter player owner
			if viable and pDatas[u.getOwner().getId()] == null
				viable = false
			
			// filter if wall or tower building
			if viable
				var e = u.getEntity()
				if not (e instanceof Wall or e instanceof Tower)
					viable = false
				// filter out full hp
				if u.getHP() == u.getMaxHP()
					viable = false
			return viable
		end))
		unit nearest = null
		var nearestDist = 999999.
		for u from ENUM_GROUP
			let dist = source.distanceTo(u.getPos())
			if dist < nearestDist
				nearestDist = dist
				nearest = u

		if nearest == null
			Log.debug("No Healback Target")
		let entity = nearest.getEntity()
		return entity

	override function onUpgrade()
		level++

	function launchHealback(UnitEntity attacked, real damage)
		var creepPos = attacked.getPos()
		UnitEntity target = HealbackTower.getNearestBuilding(creepPos.toVec2()) castTo UnitEntity
		if not target == null
			new HealbackMissile(creepPos.add(0, 0, 48), owner, damage, target)

	override function onAttack(UnitEntity target)
		var damage = getDamage()
		if damage > 0
			// new HealbackBuff(target, damage)
			launchHealback(target, damage)

public constant HEALBACK_DURATION = 3.
public buffTuple healbackBuffAbil = compiletime(createBuffObjectWithAttachmentPoint("Holy Presence", "This unit is being drained by a holy presence. Holy damage dealt to it will be healed back to allies", 
			"BTNHolyBolt.blp", Abilities.procMissile, "chest"))

public class HealbackBuff extends NormalBuff
	int hitCount
	real damage

	construct(UnitEntity target, real damage)
		super(HEALBACK_DURATION, healbackBuffAbil)
		this.hitCount = 1
		this.damage = damage
		this.apply(target)

	override function apply(UnitEntity target)
		this.target = target
		if not target.hasBuffs()
			target.newBuffs()
		for bff in target.getBuffs()
			if bff.typeId == this.typeId
				var healBuff = bff castTo HealbackBuff
				healBuff.addHit(this.damage)
				this.target = null
				terminate()
				return
		target.addBuff(this)
		refresh()

	function addHit(real damage)
		this.hitCount ++
		this.damage += damage
		
	function getHeal() returns real
		return damage

	function triggerHealback()
		var currentPos = this.target.getPos()
		UnitEntity target = HealbackTower.getNearestBuilding(currentPos.toVec2()) castTo UnitEntity
		if not target == null
			new HealbackMissile(currentPos, this.target.owner, this.getHeal(), target)
		this.hitCount = 0
		this.damage = 0

	override function onEnd()
		if this.target != null and hitCount > 0
			triggerHealback()
		super.onEnd()


constant real HEALBACK_RADIUS = 32.
constant string HEALBACK_EFFECT = Abilities.vampiricAuraTarget
constant string HEALBACK_MISSILE_EFFECT = Abilities.faerieDragonMissile

public class HealbackMissile extends Projectile
	real heal
	UnitEntity target

	construct(vec3 pos, player owner, real heal, UnitEntity target)
		super(pos, HEALBACK_RADIUS, owner, pos.angleTo2d(target.getPos().add(0, 0, 30.)), HEALBACK_MISSILE_EFFECT)
		this.heal = heal
		this.target = target
		this.setTarget(target.getPos().add(0, 0, 32), 20.)
		fx.setColor(colorA(215, 255, 215, 168))

	override function update()
		super.update()
		vel += gravity
		if (pos.distanceTo2d(target.pos) < HEALBACK_RADIUS)
			onReachTarget()
			terminate()
 
	function onReachTarget()
		if (this.target != null and this.target.actor.isAlive())
			addEffect(HEALBACK_EFFECT, target.pos.add(0, 0, 50)).destr()
			this.target.actor.addHP(this.heal)
			new TextTagEntity(pos, vec3(GetRandomReal(-1, 1),0, GetRandomReal(6,8)), this.heal.toInt().toString() , 8, 1., colorA(223, 255, 52, 255))


/** Creates an ability based on Tornado aura that allows to display a buff without side effects */
public function createBuffObjectWithAttachmentPoint(string name, string tooltip, string iconpath, string effectPath, string attachmentPoint) returns buffTuple
	let abilId = ABIL_ID_GEN.next()
	let buffId = BUFF_ID_GEN.next()

	if compiletime
		new BuffDefinition(buffId, 'Basl')
			..setName(1, name)
			..setTooltipNormal(1, name)
			..setTooltipNormalExtended(1, tooltip)
			..setIcon(iconpath)

		new AbilityDefinitionAuraSlow(abilId)
			..setName("Aura Dummy: " + name)
			..setMovementSpeedFactor(1, 0)
			..setBuffs(1, int2fourchar(buffId))
			..presetIcon(iconpath)
			..setArtTarget("")
			..setTargetsAllowed(1, "self")
			..setArtTarget(effectPath)
			..setTargetAttachmentPoint(attachmentPoint)
		
	return buffTuple(abilId, buffId)
