package AssassinTower
	import TimerUtils
	import Terrain
	import Tower
	
	int array hitnumberstore
	public constant int ASSASSIN_TOWER_BASE_ID = 'h01Q'
	int array dummyid

	public class AssassinTower extends Tower
		int level
		unit dummy
		int target
		int hitnumber
		int currenthit
		timer tim
		
		construct  (Tower t)
			super(t)
			level = 0
			dummy = CreateUnit(owner,dummyid[level],pos.x,pos.y,270.)
			debugPrint("Dummy Created",0)
			dummy.addAbility(HEIGHT_ENABLER).removeAbility(HEIGHT_ENABLER)
			SetUnitFlyHeight(dummy, 200., 0.)
			hitnumber = hitnumberstore[level]
			debugPrint("AssassinTower Created",1)

		override function onAttack(UnitEntity ue)
			target = ue castTo int
			currenthit = 0
			DestroyEffect(AddSpecialEffectTarget( "Abilities\\Spells\\NightElf\\Blink\\BlinkCaster.mdl" , dummy,"chest" ))
			tim = getTimer()
			tim.setData(this castTo int)
			tim.startPeriodic(0.4,function AssassinTower.hit)
		
		function endHitStreak()
				UnitEntity ue = target castTo UnitEntity
				DestroyTimer(tim)
				dummy.setX(actor.getX())
				dummy.setY(actor.getY())
				SetUnitVertexColor(dummy, 255,255,255,255)
				SetUnitTimeScale( dummy, 1.00 )
				SetUnitAnimation(dummy,"stand")
				SetUnitFlyHeight(dummy,160.,0.)
				SetUnitFacing(dummy, angleBetweenCoords(actor.getX(),actor.getY(),ue.actor.getX(),ue.actor.getY()).degrees())
		
		static function hit()
			AssassinTower root = GetExpiredTimer().getData() castTo AssassinTower
			UnitEntity ue = root.target castTo UnitEntity
			if not IsUnitType(ue.actor, UNIT_TYPE_DEAD)
				angle tempangle
				if root.currenthit <= root.hitnumber and root.currenthit > 0 
					tempangle = GetRandomReal(0.,360.).asAngleDegrees()
					root.dummy.setX(polarProjectionX(ue.actor.getX(),40,tempangle))
					root.dummy.setY(polarProjectionY(ue.actor.getY(),40,tempangle))
					SetUnitFacing(root.dummy,tempangle.degrees() + 180.)
					SetUnitAnimation(root.dummy,"attack")
					UnitDamageTarget(root.dummy,ue.actor,getDamage(root.level),true,false,ATTACK_TYPE_MELEE,DAMAGE_TYPE_NORMAL,WEAPON_TYPE_WHOKNOWS)
					root.currenthit ++
				else if root.currenthit <= 0
					tempangle = GetRandomReal(0.,360.).asAngleDegrees()
					SetUnitTimeScale( root.dummy, 10.00 )
					SetUnitFlyHeight(root.dummy, 0., 0.)
					SetUnitVertexColor(root.dummy,180,180,180,220)
					SetUnitAnimation(root.dummy,"attack")
					UnitDamageTarget(root.dummy,ue.actor,getDamage(root.level),true,false,ATTACK_TYPE_MELEE,DAMAGE_TYPE_NORMAL,WEAPON_TYPE_WHOKNOWS)
					root.currenthit ++ 
				else if root.currenthit > root.hitnumber
					root.endHitStreak()
			else
				root.endHitStreak()
			
		override function onUpgrade()
			level ++
			dummy.remove()
			dummy = CreateUnit(owner,dummyid[level],pos.x,pos.y,270.)
			SetUnitFlyHeight(dummy, 160., 0.)
			
			
	function getDamage(int level) returns real // Assassintower damage
		return GetRandomReal(level*10.,100.)
	

	function setTarget()
		AssassinTower at = GetAttacker().getUserData() castTo AssassinTower
					

	public function initAssassinTower()
		dummyid[0] = 'h01P'
		hitnumberstore[0] = 3

endpackage