package Tower
import public Entity
import WaveTower
import AssassinTower

constant int BASIC_TOWER_ID = 'h003'

public class Tower extends UnitEntity
	
	construct (unit tower)
		super(vec3(tower.getX(),tower.getY(),0),tower)
		tupgrade.registerUnitEvent(tower,EVENT_UNIT_UPGRADE_FINISH)
		tupgrade.registerUnitEvent(tower,EVENT_UNIT_DEATH)
			
	construct(Tower t)
		super(t.pos,t.actor)
		t.terminate()
		
		
	
	function onAttack(UnitEntity target)
		debugPrint("onAttack - normal", 0)


	function onUpgrade()
		debugPrint("onUpgrade " + actor.getTypeId().toString(), 0)
		switch actor.getTypeId()
			case FIRST_WAVE_ID
				debugPrint("isWave", 0)
				new WaveTower(this)
			case assasintypeid[0]
				debugPrint("isAssassin",0)
				new AssassinTower(this)
			default
				skip
		debugPrint("upgrade finished " + actor.getUserData().toString(), 0)
	
	static function onUpgradeEvent()
		var i = GetTriggerUnit().getUserData()
		if i != 0
			Tower t = i castTo Tower
			t.onUpgrade()
	
	static function onConstructionEvent()
		debugPrint("NewTowerBuilt",0)
		if GetUnitTypeId(GetTriggerUnit()) == BASIC_TOWER_ID
			new Tower(GetTriggerUnit())
			debugPrint("New Tower " + GetTriggerUnit().getUserData().toString(), 0)
			debugPrint("NewTowerBuilt class created",0)

trigger tupgrade

init
	CreateTrigger().registerAnyUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	.addAction(function Tower.onConstructionEvent)
	tupgrade = CreateTrigger().addAction(function Tower.onUpgradeEvent)

	