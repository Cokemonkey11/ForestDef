package Tower
import public Entity
import initlater WaveTower
import initlater AssassinTower
import initlater TrooperTower
import initlater StompingTower
import initlater ThermoTower
import initlater FlamethrowerTower
import initlater ArtilleryTower
import initlater HealbackTower
import Event
constant int BASIC_TOWER_ID = 'h003'
constant int BASIC_WALL_ID = 'h000'

public class Wall extends UnitEntity
	construct (unit wall)
		super(vec3(wall.getX(),wall.getY(),0),64,wall)

public class Tower extends UnitEntity
	
	construct (unit tower)
		super(vec3(tower.getX(),tower.getY(),0),64,tower)
		active = false
			
	construct(Tower t)
		super(t.pos, 64, t.actor)
		active = false
		destroy t
	
	function onAttack(UnitEntity _target)


	function onUpgrade()
		if hasBuffs()
			for bff in getBuffs()
				bff.refresh()
		switch actor.getTypeId()
			case FIRST_WAVE_ID
				debugPrint("isWave", 0)
				new WaveTower(this)
			case ASSASSIN_TOWER_BASE_ID
				debugPrint("isAssassin",0)
				new AssassinTower(this)
			case TOWER_TROOPER_ID
				debugPrint("isTrooper",0)
				new TrooperTower(this)
			case stompingbasetype[0]
				debugPrint("isStomper",0)
				new StompingTower(this)
			case FLAMETHROWER_ID
				debugPrint("isThermo",0)
				new FlamethrowerTower(this)
			case ART_TOWER_ID
				debugPrint("isArtillery",0)
				new ArtilleryTower(this)
			case HEAL_TOWER_ID
				debugPrint("isHeal",0)
				new HealbackTower(this)
			case THERMO_TOWER_ID
				debugPrint("iThermo",0)
				new ThermoTower(this)
			default
				debugPrint("upgrade not catched", 1)
		actor.issueImmediateOrderById(OrderId("stop"))
		debugPrint("upgrade finished " + actor.getUserData().toString(), 0)
	
	
init
	EventListener.add(EVENT_PLAYER_UNIT_CONSTRUCT_START, () -> begin
		let u = GetConstructingStructure()
		let id = u.getTypeId()
		if id == BASIC_TOWER_ID
			new Tower(u)
		else if id == BASIC_WALL_ID
			new Wall(u)
	end)
	EventListener.add(EVENT_PLAYER_UNIT_UPGRADE_START, () -> begin
		let data = GetTriggerUnit().getUserData() castTo UnitEntity
		if data != null and data instanceof Tower
			(data castTo Tower).onUpgrade()
	end)
	EventListener.add(EVENT_UNIT_DAMAGED, () -> begin
		let damager = GetEventDamageSource()
		if damager.getUserData() > 0
			let e = damager.getUserData() castTo UnitEntity
			if e instanceof Tower
				let t = e castTo Tower
				t.onAttack(GetTriggerUnit().getUserData() castTo UnitEntity)
	end)
