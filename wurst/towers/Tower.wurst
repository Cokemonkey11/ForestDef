package Tower
import public Entity
import WaveTower
import AssassinTower
import TrooperTower
import StompingTower
import ThermoTower

constant int BASIC_TOWER_ID = 'h003'
constant int BASIC_WALL_ID = 'h000'

public class Wall extends UnitEntity
	construct (unit wall)
		super(vec3(wall.getX(),wall.getY(),0),wall)
		tupgrade.registerUnitEvent(wall,EVENT_UNIT_DEATH)

public class Tower extends UnitEntity
	
	construct (unit tower)
		super(vec3(tower.getX(),tower.getY(),0),tower)
		tupgrade.registerUnitEvent(tower,EVENT_UNIT_UPGRADE_FINISH)
		tupgrade.registerUnitEvent(tower,EVENT_UNIT_DEATH)
			
	construct(Tower t)
		super(t.pos,t.actor)
		t.terminate()
	
	function onAttack(UnitEntity target)
		debugPrint("onAttack - normal", 0)


	function onUpgrade()
		debugPrint("onUpgrade " + actor.getTypeId().toString(), 0)
		switch actor.getTypeId()
			case FIRST_WAVE_ID
				debugPrint("isWave", 0)
				new WaveTower(this)
			case ASSASSIN_TOWER_BASE_ID
				debugPrint("isAssassin",0)
				new AssassinTower(this)
			case TOWER_TROOPER_ID
				debugPrint("isTrooper",0)
				new TrooperTower(this)
			case stompingbasetype[0]
				debugPrint("isStomper",0)
				new StompingTower(this)
			case THERMO_TOWER_ID
				debugPrint("isThermo",0)
				new ThermoTower(this)
				
			default
				skip
		debugPrint("upgrade finished " + actor.getUserData().toString(), 0)
	
	static function onUpgradeEvent()
		var i = GetTriggerUnit().getUserData()
		if i != 0
			Tower t = i castTo Tower
			t.onUpgrade()
	
	static function onConstructionEvent()
		let u = GetTriggerUnit()
		let id = u.getTypeId()
		if id == BASIC_TOWER_ID
			new Tower(u)
		else if id == BASIC_WALL_ID
			new Wall(u)

trigger tupgrade

init
	CreateTrigger().registerAnyUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH)
	.addAction(function Tower.onConstructionEvent)
	tupgrade = CreateTrigger().addAction(function Tower.onUpgradeEvent)

	