package Buff
import public Entity
import LinkedListModule
import Event
import Squares
import TextTagEntity
import NewDummyRecycler
public constant BUFF_ANIM_PERIOD = 0.25

public abstract class Buff
	use LinkedListModule
	UnitEntity victim

	real duration
	int abilId
	boolean running = true
	boolean done = false
	boolean applied = false

	construct(UnitEntity victim, real dur, int abilId)
		this.victim = victim
		this.abilId = abilId
		this.duration = dur
		apply()

	function update()
		if running
			duration -= BUFF_ANIM_PERIOD
		if duration <= 0.
			done = true
		
		
	function refresh() 
		if not victim.actor.hasAbility(abilId)
			victim.actor.addAbility(abilId)
			
	ondestroy
		if applied and victim != null and not victim.done
			victim.currentBuffs.remove(this)
			boolean isLast = true
			for bff in victim.currentBuffs
				if bff.typeId == this.typeId
					isLast = false
					break
			if isLast
				victim.actor.removeAbility(abilId)
			
	abstract function apply()

	abstract function attackModifier()
	
	abstract function defenseModifier()

init
	EventListener.add((EventType evnt) -> begin
		if evnt == EventType.ON_DAMAGE
			let v = GetTriggerUnit()
			let a = GetEventDamageSource()
			if a.isAliveTrick() and a.getUserData() > 0 and v.isAliveTrick() and v.getUserData() > 0
				let victimData = v.getUserData() castTo UnitEntity
				let attackerData = a.getUserData() castTo UnitEntity
				if IsPlayerAlly(victimData.owner, attackerData.owner) or victimData.owner == attackerData.owner
					// Falsify teamattacks
					if getDamage() > 0.5
						new TextTagEntity(victimData.getPos(), vec3(GetRandomReal(-2,2),GetRandomReal(-2,2),GetRandomReal(8,10)), getSquare(), 10, .8
						,colorA(GetRandomInt(150,250),GetRandomInt(125,150),GetRandomInt(125,150), 255))
						for bff in attackerData.currentBuffs
							if not bff.done
								bff.attackModifier()
						modifyDamage(0)
				else
					// Correct attack, apply Buffs
					if victimData != null
						for bff in victimData.currentBuffs
							if not bff.done
								bff.defenseModifier()
					if attackerData != null
						for bff in attackerData.currentBuffs
							if not bff.done
								bff.attackModifier()
		else if evnt == EventType.ON_DEATH
			let v = GetDyingUnit()
			if v.getUserData() > 0
				let victimData = v.getUserData() castTo UnitEntity
				victimData.onDeath(GetKillingUnit())
	end)
