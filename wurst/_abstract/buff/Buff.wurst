package Buff

import public Entity
import LinkedListModule
import Event
import Squares
import TextTagEntity
import PhysicsProjectile
import Creep

public constant BUFF_ANIM_PERIOD = 0.25
public constant EMPTY_BUFFLIST = new LinkedList<Buff>()

public abstract class Buff
	use LinkedListModule
	UnitEntity victim

	real duration
	int abilId
	boolean done = false
	boolean applied = false

	construct(UnitEntity victim, real dur, int abilId, boolean apply)
		this.victim = victim
		this.abilId = abilId
		this.duration = dur
		if victim.done
			done = true
		else if apply
			apply()

	function update()
		if duration <= 0.
			done = true
		else
			duration -= BUFF_ANIM_PERIOD
		
		
	function refresh() 
		if not victim.actor.hasAbility(abilId)
			victim.actor.addAbility(abilId)
			
	ondestroy
		if applied and victim != null and not victim.done and victim.hasBuffs()
			victim.getBuffs().remove(this)
			boolean isLast = true
			for bff in victim.getBuffs()
				if bff.typeId == this.typeId
					isLast = false
					break
			if isLast
				victim.actor.removeAbility(abilId)
			
	abstract function apply()

	abstract function attackModifier()
	
	abstract function defenseModifier()

init
	EventListener.add(EVENT_UNIT_DAMAGED, () -> begin
		let v = GetTriggerUnit()
		let a = GetEventDamageSource()
		UnitEntity victimData
		UnitEntity attackerData
		if a.isAliveTrick() and a.getUserData() > 0
			//Attacker is alive, apply his attack modifiers
			attackerData = a.getUserData() castTo UnitEntity
			if attackerData != null and attackerData.hasBuffs()
				for bff in attackerData.getBuffs()
					if not bff.done
						bff.attackModifier()
		
		if v.isAliveTrick() and v.getUserData() > 0
			//Defender is alive, apply his defense modifiers
			victimData = v.getUserData() castTo UnitEntity
			if victimData != null and victimData.hasBuffs()
				for bff in victimData.getBuffs()
					if not bff.done
						bff.defenseModifier()
						
		if v.getUserData() > 0 and a.getUserData() > 0
			victimData = v.getUserData() castTo UnitEntity
			attackerData = a.getUserData() castTo UnitEntity
			if IsPlayerAlly(victimData.owner, attackerData.owner) or victimData.owner == attackerData.owner
				// Falsify teamattacks
				if getDamage() > 0.5
					new TextTagEntity(victimData.getPos(), vec3(GetRandomReal(-2,2),GetRandomReal(-2,2),GetRandomReal(8,10)), getSquare(), 10, .8
					,colorA(GetRandomInt(150,250),GetRandomInt(125,150),GetRandomInt(125,150), 255))
					modifyDamage(0)	
	end)							
	EventListener.add(EVENT_PLAYER_UNIT_DEATH, () -> begin
		let v = GetDyingUnit()
		if v.getUserData() > 0
			let victimData = v.getUserData() castTo UnitEntity
			victimData.onDeath(GetKillingUnit())
	end)
	EventListener.add(EVENT_PLAYER_UNIT_UPGRADE_FINISH, () -> begin
		let v = GetTriggerUnit()
		if v.getUserData() > 0
			let victimData = v.getUserData() castTo UnitEntity
			if victimData.hasBuffs()
				for bff in victimData.getBuffs()
					bff.refresh()
	end)
