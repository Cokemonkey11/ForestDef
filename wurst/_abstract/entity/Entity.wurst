package Entity
import LinkedListModule
import Terrain
import PhysicsConstants
import initlater PhysicsProjectile
import Fx
import Angle
import initlater Buff
import initlater Tower
import public LinkedList
import public DmgMod
import MapBounds
import Squares
import initlater TextTagEntity
/** Base Entity Class  */
public abstract class Entity
	use LinkedListModule
	
	/** 3d vector position */
	vec3 pos
	/** 3d vector velocity */
	vec3 vel
	
	/** radius */
	real radius = 0.
	/** speed factor (multiplies to added velocity) */
	real speedFactor = 1.
	
	/** owning player */
	player owner
	
	/** flag for being static */
	boolean isStatic 	= false
	/** sleeping or active? */
	boolean active 		= true
	boolean flying 		= false
	boolean done 		= false

	construct( vec3 pos, player owner )
		this.pos = pos
		this.vel = vec3(0,0,0)
		this.owner = owner

	construct( vec3 pos, real radius, player owner )
		this.pos = pos
		this.vel = vec3(0,0,0)
		this.owner = owner
		this.radius = radius
		
	construct( vec3 pos, vec3 vel, player owner )
		this.pos = pos
		this.vel = vel
		this.owner = owner
		
	construct( vec3 pos, vec3 vel, real radius, player owner )
		this.pos = pos
		this.vel = vel
		this.owner = owner
		this.radius = radius
		
	function getPos() returns vec3
		return pos
		
	function setPos( vec3 pos )
		this.pos = pos
		
	function addPos( vec3 pos )
		this.pos += pos
		
	function getVel() returns vec3
		return vel
		
	function setVel( vec3 vel )
		this.vel = vel
		active = true
	
	function addVel( vec3 vel )
		this.vel += vel
		
	function setTarget( vec3 tpos, real speed )
		var t = distanceBetweenCoords(pos.x, pos.y, tpos.x, tpos.y) / speed
		let tangle = angleBetweenCoords(pos.x, pos.y, tpos.x, tpos.y)
		let e = getTerrainZ(tpos.x,tpos.y)
		
		if t < 1.
			t = 1./speed
		
		let startZVelocity = ((-gravity.z * t) / 2 - pos.z/t + e/t)
		this.setVel( vec3( Cos(tangle.radians()) * speed, Sin(tangle.radians()) * speed, startZVelocity) )
		
	/** This function is called every ANIMATION_PERIOD tick if the Entity is active */
	abstract function update()
	
abstract public class UnitEntity extends Entity
	static trigger dmgTrig = CreateTrigger()
	static trigger deathTrig = CreateTrigger()
	unit actor
	
	LinkedList<Buff> currentBuffs = new LinkedList<Buff>()
	
	construct( vec3 pos, unit actor )
		super(pos, actor.getOwner())
		this.actor = actor
		actor..setUserData(this castTo int)..addAbility(HEIGHT_ENABLER).removeAbility(HEIGHT_ENABLER)
		dmgTrig.registerUnitEvent(actor, EVENT_UNIT_DAMAGED)
		deathTrig.registerUnitEvent(actor, EVENT_UNIT_DEATH)
		
	construct( vec3 pos, real radius, unit actor )
		super(pos, radius, actor.getOwner())
		this.actor = actor
		actor..setUserData(this castTo int)..addAbility(HEIGHT_ENABLER).removeAbility(HEIGHT_ENABLER)
		dmgTrig.registerUnitEvent(actor, EVENT_UNIT_DAMAGED)
		
	override function update()
		updatePos()
		
	function updatePos()
		pos = vec3(actor.getX(), actor.getY(), 0.)
		
	function setNewActor(unit u)
		actor.remove()
		actor = u
		actor.setUserData(this castTo int)
		
	override function setPos(vec3 tpos)
		pos = tpos
		if(pos.inPlayable())
			actor.setPos(tpos.x,tpos.y)
			actor.setFlyHeight(tpos.z - getTerrainZ(tpos.x, tpos.y), 0)
		else 
			done = true
		
	function setXY(vec3 tpos)
		pos = tpos
		actor.setXY(tpos.x,tpos.y)
		
	static function onDamage()
		let v = GetTriggerUnit()
		let a = GetEventDamageSource()
		if a.getHP() < 0.405 or v.getHP() < 0.405
			return
		let victimData = v.getUserData() castTo UnitEntity
		let attackerData = a.getUserData() castTo UnitEntity
		if IsPlayerAlly(victimData.owner, attackerData.owner) or victimData.owner == attackerData.owner
			if getDamage() > 1
				new TextTagEntity(victimData.getPos(), vec3(GetRandomReal(-2,2),GetRandomReal(-2,2),GetRandomReal(8,10)), getSquare(), 10, .8
				,colorA(GetRandomInt(150,250),GetRandomInt(125,150),GetRandomInt(125,150), 255))
			for bff in attackerData.currentBuffs
					bff.attackModifier()
			modifyDamage(0)
		else
			if victimData != null
				for bff in victimData.currentBuffs
					bff.defenseModifier()
					
			
			if attackerData != null
				for bff in attackerData.currentBuffs
					bff.attackModifier()
				if attackerData instanceof Tower
					let td = attackerData castTo Tower
					victimData.updatePos()
					td.onAttack(victimData)
			else
				
	function onDeath(unit killer)
		done = true
			
	static function onEventDeath()
		let data = GetTriggerUnit().getUserData() castTo UnitEntity
		data.onDeath(GetKillingUnit())
		
	ondestroy
		destroy currentBuffs
		

		
init
	UnitEntity.dmgTrig.addAction(function UnitEntity.onDamage)		
	UnitEntity.deathTrig.addAction(function UnitEntity.onEventDeath)

abstract public class FxEntity extends Entity
	protected Fx fx
	
	construct( vec3 pos, real radius, player owner, angle xyAngle, string sfxpath )
		super(pos, radius, owner)
		fx = new Fx(pos, xyAngle, sfxpath)
		fx.setOwner(owner, true)
		
	construct( vec3 pos, real radius, player owner, angle xyAngle )
		super(pos, radius, owner)
		fx = new Fx(pos, xyAngle)
		fx.setOwner(owner, true)
	
	construct( vec3 pos, player owner, angle xyAngle )
		super(pos, 0., owner)
		fx = new Fx(pos, xyAngle)
		fx.setOwner(owner, true)
		
	override function update()
		pos += (vel*speedFactor)
		setPos()
		
	function setFx(string sfxpath)
		fx.setFx(sfxpath)
		
	function setPos()
		if(pos.inPlayable())
			fx.setXYZ(pos)
		else 
			done = true
		
	function getDummy() returns unit
		return fx.getDummy()
		
	override function setPos(vec3 tpos)
		pos = tpos
		fx.setPos(tpos.x,tpos.y)
		
	ondestroy
		debugPrint("fx destroyed", 1)
		destroy fx





	