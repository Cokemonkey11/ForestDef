package Event
import LinkedList
import RegisterEvents

public enum EventType
	ON_DAMAGE
	ON_DEATH
	ON_CONSTRUCT
	ON_USE_ITEM
	
public abstract class EventListener
	static LinkedList<EventListener> onDamageListeners = new LinkedList<EventListener>()
	static LinkedList<EventListener> onDeathListeners = new LinkedList<EventListener>()
	static LinkedList<EventListener> onConstructListeners = new LinkedList<EventListener>()
	static LinkedList<EventListener> onUseItemListeners = new LinkedList<EventListener>()
	
	abstract function onEvent()
	
	static function add(EventType etype, EventListener listener)
		switch (etype)
			case ON_DAMAGE
				onDamageListeners.add(listener)
			case ON_DEATH
				onDeathListeners.add(listener)
			case ON_CONSTRUCT
				onConstructListeners.add(listener)
			case ON_USE_ITEM
				onUseItemListeners.add(listener)
		
	static function onDamage()
		for listener in onDamageListeners
			listener.onEvent()
			
	static function onDeath()
		for listener in onDeathListeners
			listener.onEvent()
	
	static function onConstruct()
		for listener in onConstructListeners
			listener.onEvent()
		
	static function onUseItem()
		for listener in onUseItemListeners
			listener.onEvent()
			
public function registerUnit(unit u)
	dmgTrig.registerUnitEvent(u, EVENT_UNIT_DAMAGED)
	deathTrig.registerUnitEvent(u, EVENT_UNIT_DEATH)
			
trigger dmgTrig = CreateTrigger()
trigger deathTrig = CreateTrigger()

init
	dmgTrig.addAction(function EventListener.onDamage)		
	deathTrig.addAction(function EventListener.onDeath)
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_CONSTRUCT_FINISH, function EventListener.onConstruct)
	registerPlayerUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM, function EventListener.onConstruct)
	
